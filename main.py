# main.py
import os
from langchain.memory import ConversationBufferMemory
from perplexity import Perplexity

from utils import (
    load_user_data,
    initialize_rag,
    classify_input,
    get_rag_response,
    llm
)
from config import USER_DATA_PATH

PERPLEXITY_API_KEY = "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"

def main():
    # Load user data
    user_data = load_user_data()

    username = "sameer"  #in production extract the username from the user_data json file
    # Initialize RAG
    print("Initializing knowledge base...")
    qa_chains = initialize_rag()
    print("Knowledge base ready!")
    
    # Start conversation
    memory = ConversationBufferMemory()
    print(f"\nHi {username}, I am Satva, how can I help you today?")
    
    client = Perplexity(api_key=PERPLEXITY_API_KEY)
    while True:
        user_input = input("\nYou: ")
        
        if user_input.lower() == "exit":
            print("Goodbye! Your progress has been saved.")
            break
        
        # Classify input
        input_type = classify_input(user_input)
        print(input_type)
        if input_type == "question":
            # Get RAG response with advice-focused format
            response = get_rag_response(user_input, qa_chains)
            print(f"\nSatva: {response}")
        else:
            # General conversation
            context = f"""
            User Context:
            - Name: {username}
            
            Conversation History:
            {memory.load_memory_variables({})['history']}
            
            Current Query: {user_input}
            
            Provide a helpful, supportive response.
            Also at the end, always end with this
            "Also, here is something you will surely like, only for you"
            """

            response = llm.invoke(context)
            print(f"\nSatva: {response.content}")


            search = client.search.create(
                query= f'''Suggest some stories,podacsts, videos, blogs like The speaking tree or self help book quotes or any other motivational videos, songs anything. I will be giving you a list of problems that the user is suffering from in his daily life, they are very geenral but very subtle problems and do affect his daily chores more than any other major problems, suggest very very curated sources which really actually help me. The reuslt must include text, audios and videos as well. So ensure all of this. 
                This is your list of user history {memory.load_memory_variables({})['history']} and based on his current question {user_input} and also the current response as generated by another LLM: {response}. Now based on this you need to figure if even it is necessary to give any resources. 
                If really necessary and find high quality, very good resources otherwise just output a very very good quote of the day in the format
                "Quote of the day: <quote>" ''',
                max_results=2
            )

            for result in search.results:
                print(f"{result.title}: {result.url}")
            memory.save_context({"input": user_input}, {"output": response.content})

if __name__ == "__main__":
    main()